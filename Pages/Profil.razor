@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Linq
@using System.Threading
@using Microsoft.AspNetCore.Http;
@using BlazorInputFile;
@page "/personsPage/{profilmyvalue}"


<div class="container-fluid was-validated">
    <h3>Профиль пользователя</h3>
    <div class="row">
        <div class="col-2">
            <img src="@pimg" alt="Аватарка пользователя" class="img-thumbnail" />
        </div>
    </div>
    <div class="row" style="margin-top:10px; margin-left:1px">
        <InputFile OnChange="HandleSelection" />
    </div>
    <div class="row" style="margin-top:10px">
        <div class="col-4">
            <label for="fname">Имя</label>
            <input class="form-control" type="text" id="fname" @bind="firstName" required />
            <div class="invalid-feedback">
                Заполните поле!
            </div>
        </div>
    </div>
    <div class="row" style="margin-top:10px">
        <div class="col-4">
            <label for="sname">Фамилия</label>
            <input class="form-control" type="text" id="sname" @bind="secondName" required />
            <div class="invalid-feedback">
                Заполните поле!
            </div>
        </div>
    </div>
    <div class="row" style="margin-top:10px">
        <div class="col-4">
            <label for="ename">Email</label>
            <input class="form-control" id="ename" type="email" pattern=".+.com" @bind="email" required />
            <div class="invalid-feedback">
                Заполните поле верно!
            </div>
        </div>
    </div>
    <div class="row" style="margin-top:10px">
        <div class="col-4">
            <label for="pname">Пароль</label>
            <input class="form-control" id="pname" type="password" pattern="[A-Za-z-0-9]{6,}" @bind="pmail" required />
            <div class="invalid-feedback">
                Заполните поле верно!
            </div>
        </div>
    </div>
    <div class="row" style="margin-top:10px">
        <div class="col">
            <button class="btn btn-secondary" @onclick="saveChanges">Сохранить изменения</button>
        </div>
    </div>
</div>

@code {
    private MySqlDbContext context = new MySqlDbContext();

    [Parameter]
    public string profilmyvalue { get; set; }

    private string firstName;
    private string secondName;
    private string email;
    private string pmail;
    private string pimg;

    protected override void OnInitialized()
    {
        defaultInput();
        base.OnInitialized();
    }

    private void defaultInput()
    {
        firstName = context.Persons.Find(Convert.ToInt32(profilmyvalue)).FirstName;
        secondName = context.Persons.Find(Convert.ToInt32(profilmyvalue)).SecondName;
        email = context.Persons.Find(Convert.ToInt32(profilmyvalue)).Email;
        pmail = context.Persons.Find(Convert.ToInt32(profilmyvalue)).Password;
        if (!string.IsNullOrWhiteSpace(context.Persons.Find(Convert.ToInt32(profilmyvalue)).PathImg))
        {
            pimg = context.Persons.Find(Convert.ToInt32(profilmyvalue)).PathImg;
        }

    }

    private bool IsValidEmail(string emaill)
    {
        string pattern = @"^(?!\.)(""([^""\r\\]|\\[""\r\\])*""|" + @"([-a-z0-9!#$%&'*+/=?^_`{|}~]|(?<!\.)\.)*)(?<!\.)" + @"@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$";
        var regex = new Regex(pattern, RegexOptions.IgnoreCase);
        return regex.IsMatch(emaill);
    }

    private void imgg(string fileName)
    {

        pimg = "/img/" + fileName;
        context.Persons.Find(Convert.ToInt32(profilmyvalue)).PathImg = pimg;
        context.SaveChanges();
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var filepath = "wwwroot\\img\\" + file.Name;
            using (var stream = System.IO.File.Create(filepath))
            {

                await file.Data.CopyToAsync(stream);
            }
            imgg(file.Name);
        }
    }

    private void saveChanges()
    {
        if (!string.IsNullOrWhiteSpace(firstName) && !string.IsNullOrWhiteSpace(secondName) && !string.IsNullOrWhiteSpace(email) && !string.IsNullOrWhiteSpace(pmail))
        {
            if (pmail.Length >= 6 && IsValidEmail(email))
            {
                var person = context.Persons.Find(Convert.ToInt32(profilmyvalue));

                person.FirstName = firstName;
                person.SecondName = secondName;
                person.Email = email;
                person.Password = pmail;

                context.SaveChanges();
            }
        }
    }

}
