@using System.Text.RegularExpressions;
@using System.Linq;
@using BlazorInputFile;
@page "/Home/Profil/{profilmyvalue}"


<div class="container-fluid was-validated">
    <h3>Профиль пользователя</h3>
    <div class="row">
        <div class="col-2">
            <img src="@pimg" alt="Аватарка пользователя" class="img-thumbnail" />
        </div>
    </div>
    <EditForm Model="@validModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row" style="margin-top:10px; margin-left:1px">
            <InputFile OnChange="HandleSelection" />
        </div>
        <div class="row" style="margin-top:10px">
            <div class="col-4">
                <label for="fname">Имя</label>
                <InputText id="fname" placeholder="Имя" @bind-Value="validModel.FirstName" />
            </div>
        </div>
        <div class="row" style="margin-top:10px">
            <div class="col-4">
                <label for="sname">Фамилия</label>
                <InputText placeholder="Фамилия" id="sname" @bind-Value="validModel.SecondName" />
            </div>
        </div>
        <div class="row" style="margin-top:10px">
            <div class="col-4">
                <label for="ename">Email</label>
                <InputText placeholder="Email" id="ename" @bind-Value="validModel.Email" />
            </div>
        </div>
        <div class="row" style="margin-top:10px">
            <div class="col-4">
                <label for="pname">Пароль</label>
                <InputText type="password" placeholder="Password" id="pname" @bind-Value="validModel.Password" />
            </div>
        </div>
        <div class="row" style="margin-top:10px">
            <div class="col">
                <button class="btn btn-secondary" type="submit">Сохранить изменения</button>
            </div>

        </div>
    </EditForm>
</div>

@code {
    private ValidModel validModel = new ValidModel();//создание экземпляра модели валидации

    private MySqlDbContext context = new MySqlDbContext();//создание экзеипляра контекста

    [Parameter]
    public string profilmyvalue { get; set; }

    //забинденные переменные
    private string pimg;

    //Здесь вызывается метод defaultInput (сделал так чтобы метод вызывался только при 1 прорисовки страницы, а не при каждом щелчке на поле или мимо поля)
    protected override void OnInitialized()
    {
        defaultInput();
        base.OnInitialized();
    }

    //Вывод данных из бд по Id = profilmyvalue
    private void defaultInput()
    {
        validModel.FirstName = context.Persons.Find(Convert.ToInt32(profilmyvalue)).FirstName;
        validModel.SecondName = context.Persons.Find(Convert.ToInt32(profilmyvalue)).SecondName;
        validModel.Email = context.Persons.Find(Convert.ToInt32(profilmyvalue)).Email;
        validModel.Password = context.Persons.Find(Convert.ToInt32(profilmyvalue)).Password;
        if (!string.IsNullOrWhiteSpace(context.Persons.Find(Convert.ToInt32(profilmyvalue)).PathImg))
        {
            pimg = context.Persons.Find(Convert.ToInt32(profilmyvalue)).PathImg;
        }
    }

    //Копирование файла в нашу файловую систему и вызов метода imgg
    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var filepath = "wwwroot\\img\\" + file.Name;
            using (var stream = System.IO.File.Create(filepath))
            {

                await file.Data.CopyToAsync(stream);
            }
            pimg = "/img/" + file.Name;
            context.Persons.Find(Convert.ToInt32(profilmyvalue)).PathImg = pimg;
            context.SaveChanges();
        }
    }

    //Сохранение изменений в бд при успешной валидации
    private void HandleValidSubmit()
    {
        var person = context.Persons.Find(Convert.ToInt32(profilmyvalue));

        person.FirstName = validModel.FirstName;
        person.SecondName = validModel.SecondName;
        person.Email = validModel.Email;
        person.Password = validModel.Password;

        context.SaveChanges();
    }

}
