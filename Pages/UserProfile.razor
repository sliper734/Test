@using System.Linq;
@using BlazorInputFile;
@page "/UserProfile/{profilmyvalue}"
@inject MySqlDbContext dbcontext
@inject NavigationManager navMan
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor


<div class="container-fluid was-validated">
    <AuthorizeView Context="authContext">
        <Authorized>
            <h3>Профиль пользователя</h3>
            <div class="row">
                <div class="col-2">
                    <img src="@pimg" alt="Аватарка пользователя" class="img-thumbnail" />
                </div>
            </div>
            <EditForm Context="editContext" Model="@validModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row" style="margin-top:10px; margin-left:1px">
                    <InputFile OnChange="HandleSelection" />
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-4">
                        <label for="fname">Имя</label>
                        <InputText id="fname" placeholder="Имя" @bind-Value="validModel.FirstName" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-4">
                        <label for="sname">Фамилия</label>
                        <InputText placeholder="Фамилия" id="sname" @bind-Value="validModel.SecondName" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-4">
                        <label for="ename">Email</label>
                        <InputText placeholder="Email" id="ename" @bind-Value="validModel.Email" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-4">
                        <label for="pname">Пароль</label>
                        <InputText type="password" placeholder="Password" id="pname" @bind-Value="validModel.Password" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col">
                        <button class="btn btn-secondary" type="submit">Сохранить изменения</button>
                    </div>

                </div>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <h1>Авторизируйтесь!</h1>
        </NotAuthorized>
    </AuthorizeView>
    <AuthorizeView Roles="admin">
        <Authorized>
            <EditForm Context="roleContext" Model="rolee">
                <div class="row" style="margin-top:10px;">
                    <label for="roleeSelect">Выберите роль</label>
                </div>
                <div class="row" style="margin-bottom:10px">
                    <InputSelect id="roleeSelect" @bind-Value="role">
                        @foreach (var item in dbcontext.Roles)
                        {
                            <option>@item.RoleName</option>
                        }
                    </InputSelect>
                </div>
            </EditForm>

        </Authorized>

    </AuthorizeView>

</div>

@code {
    private string role = "";
    private Role rolee = new Role();
    private ValidModel validModel = new ValidModel();

    [Parameter]
    public string profilmyvalue { get; set; }

    private string pimg;

    protected override void OnInitialized()
    {
        int pmv;
        if (Int32.TryParse(profilmyvalue, out pmv))
        {
            defaultInput(pmv);
        }
        else if(httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            string s = httpContextAccessor.HttpContext.User.Identity.Name;
            int id = dbcontext.Persons.FirstOrDefault(x => x.Email == s).ID;
            navMan.NavigateTo($"UserProfile/{id}", true);
        }
        base.OnInitialized();
    }

    //Вывод данных из бд по Id = profilmyvalue
    private void defaultInput(int pmv)
    {
            validModel.FirstName = dbcontext.Persons.Find(Convert.ToInt32(pmv)).FirstName;
            validModel.SecondName = dbcontext.Persons.Find(Convert.ToInt32(pmv)).SecondName;
            validModel.Email = dbcontext.Persons.Find(Convert.ToInt32(pmv)).Email;
            validModel.Password = dbcontext.Persons.Find(Convert.ToInt32(pmv)).Password;
            if (!string.IsNullOrWhiteSpace(dbcontext.Persons.Find(Convert.ToInt32(pmv)).PathImg))
            {
                pimg = dbcontext.Persons.Find(Convert.ToInt32(pmv)).PathImg;
            }
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var filepath = "wwwroot\\img\\" + file.Name;
            using (var stream = System.IO.File.Create(filepath))
            {
                await file.Data.CopyToAsync(stream);
            }
            pimg = "/img/" + file.Name;
            dbcontext.Persons.Find(Convert.ToInt32(profilmyvalue)).PathImg = pimg;
            dbcontext.SaveChanges();
        }
    }

    private void HandleValidSubmit()
    {
        var person = dbcontext.Persons.Find(Convert.ToInt32(profilmyvalue));

        person.FirstName = validModel.FirstName;
        person.SecondName = validModel.SecondName;
        person.Email = validModel.Email;
        person.Password = validModel.Password;

        dbcontext.SaveChanges();
    }

}
